#pragma once
#include<DxLib.h>
#include<btBulletDynamicsCommon.h>

//サイズを表す構造体
struct Size {
	float w;//幅
	float h;//高さ
};

//座標を表す構造体
struct Vector2 {
	Vector2():x(0),y(0){}
	Vector2(float inx,float iny):x(inx),y(iny){}
	float x, y;
	///ベクトルの大きさを返します
	float Magnitude()const;
	
	///正規化(大きさを１に)します
	void Normalize();

	///正規化ベクトルを返します
	Vector2 Normalized();

	void operator+=(const Vector2& v);
	void operator+=(const float v);

	void operator-=(const Vector2& v);
	void operator*=(float scale);
	Vector2 operator*(float scale);
	Vector2 operator*(Vector2& vec);

	Vector2 operator/(float scale);
	Vector2 operator-() {
		return Vector2(-x, -y);
	}

	//比較演算子
	bool operator ==(const Vector2& vec)const;
	bool operator !=(const Vector2& vec)const;
	bool operator <=(const Vector2& vec)const;
	bool operator <(const Vector2& vec)const;
	bool operator >=(const Vector2& vec)const;
	bool operator >(const Vector2& vec)const;

};

struct Vector2Int {
	Vector2Int():x(0),y(0){}
	Vector2Int(int inx,int iny):x(inx),y(iny){}
	int x, y;

	void operator+=(const Vector2Int& v);
	void operator-=(const Vector2Int& v);
	void operator*=(int scale);
	Vector2Int operator+(const Vector2Int& v);
	Vector2Int operator-(const Vector2Int& v);
	Vector2Int operator*(int scale);
	Vector2Int operator-() {
		return Vector2Int(-x, -y);
	}
	Vector2Int operator+() {
		return Vector2Int(+x, +y);
	}

	//比較演算子
	bool operator ==(const Vector2Int& vec)const;
	bool operator !=(const Vector2Int& vec)const;
	bool operator <=(const Vector2Int& vec)const;
	bool operator <(const Vector2Int& vec)const;
	bool operator >=(const Vector2Int& vec)const;
	bool operator >(const Vector2Int& vec)const;
};

Vector2 operator+(const Vector2& va, const Vector2 vb);
Vector2 operator-(const Vector2& va, const Vector2 vb);

struct Vector3 {
	Vector3() :x(0), y(0), z(0) {}
	Vector3(float inx, float iny,float inz) :x(inx), y(iny) ,z(inz) {}
	float x, y, z;

	///ベクトルの大きさを返します
	float Magnitude()const;
	
	///正規化(大きさを１に)します
	void Normalize();

	///正規化ベクトルを返します
	Vector3 Normalized();
	Vector3 toDiopter();
	VECTOR toVECTOR();
	btVector3 tobtVec();
	void operator+=(const Vector3& v);
	void operator-=(const Vector3& v);
	void operator*=(float scale);
	Vector3 operator*(float scale);
	Vector3 operator*(Vector3& vec);
	Vector3 operator=(const Vector3& v);

	Vector3 operator/(float scale);
	Vector3 operator-() {
		return Vector3(-x, -y,-z);
	}

	//比較演算子
	bool operator ==(const Vector3& vec)const;
	bool operator !=(const Vector3& vec)const;
	bool operator <=(const Vector3& vec)const;
	bool operator <(const Vector3& vec)const;
	bool operator >=(const Vector3& vec)const;
	bool operator >(const Vector3& vec)const;

};
Vector3 operator+(const Vector3& va, const Vector3 vb);
Vector3 operator-(const Vector3& va, const Vector3 vb);

struct Line
{
	Vector3 p;		//始点
	Vector3 end;	//終点
	Vector3 vec();
};



///内積を返す
float Dot(const Vector2& va, const Vector2& vb);

///外積を返す
float Cross(const Vector2& va, const Vector2& vb);

///内積を返す
float Dot(const Vector3& va, const Vector3& vb);

///外積を返す
Vector3 Cross(const Vector3& va, const Vector3& vb);

//Vector3に変換
Vector3 ConvertVECTORtoVector3(const VECTOR& v3);

double ClampD(double value, double minValue = 0.0, double maxValue = 1000.0);

///内積演算子
float operator*(const Vector2& va, const Vector2& vb);

///外積演算子
float operator%(const Vector2& va, const Vector2& vb);

//とりあえず「座標」って意味だとベクタより
//Positionのほうがよくね？って理由でこの名前
typedef Vector2 Position2;
typedef Vector3 Position3;


//円
struct Circle {
	float radius;//半径
	Position2 pos; //中心座標
	Circle() :radius(0), pos(0, 0) {}
	Circle(float r, const Position2& p) :radius(r), pos(p) {}
};
//
/////球を表す構造体
//struct Sphere {
//	float radius;//半径
//	Position3 pos; //中心座標
//	Sphere() :radius(0), pos(0, 0, 0) {}
//	Sphere(float r, Position3& p) :radius(r), pos(p) {}
//};
////カプセル
//struct Capsule {
//	float radius;//半径
//	Position2 posA; //端点A
//	Position2 posB; //端点B
//	Capsule() :radius(0), posA(0, 0), posB(0, 0) {}
//	Capsule(float r, const Position2& a, const Position2& b):
//		radius(r), posA(a), posB(b) {}
//	Capsule(float r, float ax,float ay, float bx,float by) :
//		radius(r), posA(ax,ay), posB(bx,by) {}
//};

struct Rect {
	Position2 pos; //中心座標
	int w, h;//幅,高さ
	Rect() : pos(0, 0), w(0), h(0) {}
	Rect(float x, float y, int inw, int inh) :
		pos(x, y), w(inw), h(inh) {}
	Rect(Position2& inpos, int inw, int inh) :
		pos(inpos), w(inw), h(inh)
	{}
	void SetCenter(float x, float y) {
		pos.x = x;
		pos.y = y;
	}
	void SetCenter(const Position2& inpos) {
		pos.x = inpos.x;
		pos.y = inpos.y;
	}
	Vector2 Center() {
		return pos;
	}
	float Left() { return pos.x - w / 2; }
	float Top() { return pos.y - h / 2; }
	float Right() { return pos.x + w / 2; }
	float Bottom() { return pos.y + h / 2; }
	void Draw();//自分の矩形を描画する
	void Draw(Vector2& offset);//自分の矩形を描画する(オフセット付き)
};

struct Matrix {
	float m[3][3];
};

///単位行列を返す
Matrix IdentityMat();

///平行移動行列を返す
///@param x X方向平行移動量
///@param y Y方向平行移動量
Matrix TranslateMat(float x, float y);

///回転行列を返す
///@param angle 回転角度
Matrix RotateMat(float angle);

///２つの行列の乗算を返す
///@param lmat 左辺値(行列)
///@param rmat 右辺値(行列)
///@attention 乗算の順序に注意してください
Matrix MultipleMat(const Matrix& lmat, const Matrix& rmat);
Matrix operator*(const Matrix& lmat, const Matrix& rmat);

///ベクトルに対して行列乗算を適用し、結果のベクトルを返す
///@param mat 行列
///@param vec ベクトル
Vector2 MultipleVec(const Matrix& mat, const Vector2& vec);
Vector2 operator*(const Matrix& mat, const Vector2& vec);




